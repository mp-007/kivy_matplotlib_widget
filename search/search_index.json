{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Kivy matplotlib widget is a fast matplotlib rendering for Kivy based on Kivy_matplotlib project github.com/jeysonmc/kivy_matplotlib and kivy scatter. Hover option is also based on the algorithm from mplcursors project. Matplotlib used 'agg' backend</p> <p></p> <p>My goal with my project, it's to create a good interactive graph with the lowest dependencies and package size (kivy+matplotlib).</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>zoom with 2 fingers or mouse scroll</li> <li>pan with 1 finger or mouse left click</li> <li>zoom box like plotly library</li> <li>reset axis on double-click (home button)</li> <li>fast rendering mode (axis not updated for faster draw)</li> <li>use only 2 packages (kivy + matplotlib) and no additional backend</li> <li>matplotlib cursor and kivy hover option (touch or desktop mode)</li> <li>legend widget like plotly library</li> <li>interactive axis like plotly library</li> <li>min/max touch option to easily change axis limit</li> <li>autoscale option</li> <li>several selectors widget (rectangle, lasso, ellipse and span)</li> </ul> <p>Note</p> <p>Note that this project is different from kivy-garden matploltib. I have create this project because I was not able to create a good interactive graph with big data with the garden library.</p>"},{"location":"installation/","title":"How to install","text":"<p>Install with pip install (just import module in your header to register all the widgets in your kivy Factory: import kivy_matplotlib_widget) <pre><code>pip install kivy-matplotlib-widget\n</code></pre> You can also copy the needed widget in project</p>"},{"location":"Behaviour/interactive-axes/","title":"Interactive axes","text":"<p>Interactive axis can be activate my setting interactive_axis kivy property to True</p> <pre><code>MatplotFigureSubplot:\n    interactive_axis: True\n</code></pre> <p>To better understand this option, see ithe image above (twinx axis example):</p> <p></p>"},{"location":"Behaviour/interactive-axes/#example-to-see-this-behaviour","title":"Example to see this behaviour","text":"<ul> <li>example_interactive_axis</li> </ul>"},{"location":"Behaviour/min-max/","title":"Min/Max","text":"<p>To easily change axis min/max with touch, you can set min_max_option kivy property to True</p> <pre><code>MatplotFigureSubplot:\n    min_max_option: True\n</code></pre> <p>If you don't want to kivy keyboard to show up, just disable the keyboard mode (see example_minmax_option)</p> <p>To better understand this option, see ithe image above (twinx axis example):</p> <p></p>"},{"location":"Behaviour/min-max/#example-to-see-this-behaviour","title":"Example to see this behaviour","text":"<ul> <li>example_minmax_option</li> </ul>"},{"location":"Behaviour/zoom/","title":"Zoom","text":""},{"location":"Behaviour/zoom/#zoombox","title":"Zoombox","text":"<p>The zoombox behavior is simialr as plotly library. When the initial touch and the current touch is lower than dp(20), you can zoom horizontally or vertically. Otherwise, it's only a normal zoombox.</p> <p></p> <p>Note</p> <p>Minimum zoom box is set to dp(20). So if the zoombox is lower than that, zoombox action will be cancel. The user can change this minimum value with \"minzoom\" kivy property.</p>"},{"location":"Behaviour/zoom/#horizontal-and-vertical-zoom","title":"horizontal and vertical zoom","text":"<p>If the user what to zoom with 2 fingers in horizontal or vertical only, you can set auto_zoom kivy property to True.</p> <pre><code>MatplotFigureSubplot:\n    auto_zoom: True\n</code></pre> <p>You can also set the angle detection limit (defaul 15deg)</p> <pre><code>MatplotFigureSubplot:\n    auto_zoom: True\n    zoom_angle_detection: dp(10)\n</code></pre> <p>To better understand this option, see ithe image above (with 15deg angle detection):</p> <p></p>"},{"location":"Converter/converter/","title":"Convert any matplotlib figure with 1 function","text":"<p>Convert any matplotlib 2D figure into kivy interactive graph with only 2 lines in your ipython console <pre><code>from kivy_matplotlib_widget.tools.interactive_converter import interactive_graph_ipython\n\ninteractive_graph_ipython(fig) #fig is your matplotlib figure instance\n</code></pre> Interactive_graph_ipython is used to generate kivy interactive graph directly in python interactive console (ipython) or directly in the code if you have only 1 figure. You can generate only 1 figure at a time with this function. </p> <p>You can close your kivy graph (or ctrl+c) if you want to resume your code and then you can call interactive_graph_ipython again.</p> <p>See interactive_converter folder in the examples for more details.</p>"},{"location":"Converter/converter/#3d-figure-converter","title":"3D figure converter","text":"<p>For 3D figure, use this function</p> <pre><code>interactive_graph3D_ipython(fig) #fig is your matplotlib figure instance\n</code></pre>"},{"location":"Converter/converter/#not-blocking-method-multiprocessing","title":"Not blocking method (multiprocessing)","text":"<p>If you need to generate multiple figure with a no blocking method, please see interactive_graph and interactive_graph3D functions.</p> <p>These functions use python multiprocessing method, so it's a not blocking method and several figure can be generated. Becauce it use mutiprocessing method, it need to be call with <code>if __name__ == \"__main__\":</code>.</p> <pre><code>if __name__ == \"__main__\": \n    interactive_graph(fig) #2D figure\n\n    interactive_graph3D(fig) #3D figure\n</code></pre>"},{"location":"Converter/converter/#other-converter-functions","title":"Other converter functions","text":"<p>For more control, you can use app_window and app_window3D directly. These function are used inside interactive_graph and interactive_graph3D functions.</p> <pre><code>from kivy_matplotlib_widget.tools.interactive_converter import app_window,app_window_3D\n</code></pre> <p>This code test differents kind of figure using these functions. To make this code work, create a .py file and run this code.</p> <pre><code>import multiprocessing\nimport matplotlib.pyplot as plt\nfrom kivy_matplotlib_widget.tools.interactive_converter import app_window,app_window_3D\nimport numpy as np\n\ndef generate_plot(kwargs):\n    \"\"\"Function to generate and display the plot.\"\"\"\n    num = kwargs['num']\n    if num == 1:\n        # 1. Line Plot (1D)\n        x = np.linspace(0, 10, 100)\n        y = np.sin(x)\n        plt.figure()\n        plt.plot(x, y)\n        plt.title(\"Line Plot\")\n        app_window(plt.gcf())\n    elif num == 2:\n        # 2. Scatter Plot (2D)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        plt.figure()\n        plt.scatter(x, y)\n        plt.title(\"Scatter Plot\")\n        app_window(plt.gcf())\n    elif num == 3:\n        # 3. 3D Scatter Plot (3D using color for 3rd dimension)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        plt.figure()\n        plt.scatter(x, y, c=z, cmap='viridis')\n        plt.colorbar(label=\"Z-axis (color)\")\n        plt.title(\"3D Scatter in 2D\")\n        app_window(plt.gcf(),autoscale_tight=True)\n    elif num == 4:\n        # 4. 4D Scatter Plot (4D with size and color for extra dimensions)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        sizes = 100 * np.random.rand(100)\n        plt.figure()\n        plt.scatter(x, y, c=z, s=sizes, cmap='plasma', alpha=0.7)\n        plt.colorbar(label=\"Color dimension\")\n        plt.title(\"4D Scatter in 2D\")\n        app_window(plt.gcf())\n    elif num == 5:\n        # 5. Bar Plot\n        categories = ['A', 'B', 'C', 'D']\n        values = [5, 7, 3, 8]\n        plt.figure()\n        plt.bar(categories, values)\n        plt.title(\"Bar Plot\")\n        app_window(plt.gcf())\n    elif num == 6:\n        # 6. Histogram\n        values = np.random.randn(1000)\n        plt.figure()\n        plt.hist(values, bins=20)\n        plt.title(\"Histogram\")\n        app_window(plt.gcf())\n    elif num == 7:\n        # 7. Pie Chart\n        sizes = [15, 30, 45, 10]\n        labels = ['A', 'B', 'C', 'D']\n        plt.figure()\n        plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n        plt.title(\"Pie Chart\")\n        app_window(plt.gcf())\n    elif num == 8:\n        # 8. Heatmap (2D data)\n        data = np.random.rand(10, 10)\n        plt.figure()\n        plt.imshow(data, cmap='hot', interpolation='nearest')\n        plt.colorbar()\n        plt.title(\"Heatmap\")\n        app_window(plt.gcf())\n    elif num == 9:\n        # 9. Contour Plot\n        x = np.linspace(-5, 5, 100)\n        y = np.linspace(-5, 5, 100)\n        x, y = np.meshgrid(x, y)\n        z = np.sin(np.sqrt(x ** 2 + y ** 2))\n        plt.figure()\n        plt.contour(x, y, z, cmap='viridis')\n        plt.title(\"Contour Plot\")\n        app_window(plt.gcf(),autoscale_tight=True)\n    elif num == 10:\n        # 10. Box Plot\n        data = [np.random.rand(50), np.random.rand(50), np.random.rand(50)]\n        plt.figure()\n        plt.boxplot(data)\n        plt.title(\"Box Plot\")\n        app_window(plt.gcf())\n    elif num == 11:\n        # 11. Violin Plot\n        data = [np.random.rand(50), np.random.rand(50), np.random.rand(50)]\n        plt.figure()\n        plt.violinplot(data)\n        plt.title(\"Violin Plot\")\n        app_window(plt.gcf())\n    elif num == 12:\n        # 12. Step Plot\n        x = np.arange(0, 10, 0.1)\n        y = np.sin(x)\n        plt.figure()\n        plt.step(x, y)\n        plt.title(\"Step Plot\")\n        app_window(plt.gcf())\n    elif num == 13:\n        # 13. Error Bar Plot\n        x = np.linspace(0, 10, 10)\n        y = np.sin(x)\n        errors = 0.1 + 0.2 * np.sqrt(x)\n        plt.figure()\n        plt.errorbar(x, y, yerr=errors, fmt='-o')\n        plt.title(\"Error Bar Plot\")\n        app_window(plt.gcf())\n    elif num == 14:\n        # 14. Polar Plot\n        theta = np.linspace(0, 2 * np.pi, 100)\n        r = 1 + np.sin(3 * theta)\n        plt.figure()\n        ax = plt.subplot(111, polar=True)\n        ax.plot(theta, r)\n        plt.title(\"Polar Plot\")\n        app_window(plt.gcf())\n    elif num == 15:\n        # 15. Quiver Plot\n        x, y = np.meshgrid(np.arange(-2, 2, 0.5), np.arange(-2, 2, 0.5))\n        u = -y\n        v = x\n        plt.figure()\n        plt.quiver(x, y, u, v)\n        plt.title(\"Quiver Plot\")\n        app_window(plt.gcf())\n    elif num == 16:\n        # 16. 3D Scatter Plot (3D in 3D)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        ax.scatter(x, y, z, c='blue')\n        ax.set_title(\"3D Scatter in 3D\")\n        app_window_3D(plt.gcf())\n    elif num == 17:\n        # 17. 4D Scatter Plot (4D in 3D with color for 4th dimension)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        c = np.random.rand(100)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        p = ax.scatter(x, y, z, c=c, cmap='viridis')\n        fig.colorbar(p, label=\"4th Dimension (color)\")\n        ax.set_title(\"4D Scatter in 3D\")\n        app_window_3D(plt.gcf())\n    elif num == 18:\n        # 18. 5D Scatter Plot (5D in 3D with color and size for extra dimensions)\n        x = np.random.rand(100)\n        y = np.random.rand(100)\n        z = np.random.rand(100)\n        c = np.random.rand(100)\n        sizes = 100 * np.random.rand(100)\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n        p = ax.scatter(x, y, z, c=c, s=sizes, cmap='plasma', alpha=0.7)\n        fig.colorbar(p, label=\"4th Dimension (color)\")\n        ax.set_title(\"5D Scatter in 3D\")\n        app_window_3D(plt.gcf())\n\n\nif __name__ == \"__main__\":\n    # Set the multiprocessing start method\n    multiprocessing.set_start_method(\"spawn\")\n\n    # Place Kivy imports here to ensure they're only in the main process\n    from kivy.app import App\n    from kivy.uix.button import Button\n    from kivy.uix.boxlayout import BoxLayout\n\n\n    class PlottingApp(App):\n        def build(self):\n            layout = BoxLayout(orientation=\"vertical\")\n\n            b1 = Button(text=\"1 'Line Plot'\")\n            b1.bind(on_press=lambda x: self.generate_plot(1))\n            b2 = Button(text=\"2 'Scatter Plot'\")\n            b2.bind(on_press=lambda x: self.generate_plot(2))\n            b3 = Button(text=\"3 '3D Scatter in 2D'\")\n            b3.bind(on_press=lambda x: self.generate_plot(3))\n            b4 = Button(text=\"4 '4D Scatter in 2D'\")\n            b4.bind(on_press=lambda x: self.generate_plot(4))\n            b5 = Button(text=\"5 'Bar Plot'\")\n            b5.bind(on_press=lambda x: self.generate_plot(5))\n            b6 = Button(text=\"6 'Histogram'\")\n            b6.bind(on_press=lambda x: self.generate_plot(6))\n            b7 = Button(text=\"7 'Pie Chart'\")\n            b7.bind(on_press=lambda x: self.generate_plot(7))\n            b8 = Button(text=\"8 'Heatmap'\")\n            b8.bind(on_press=lambda x: self.generate_plot(8))\n            b9 = Button(text=\"9 'Contour Plot'\")\n            b9.bind(on_press=lambda x: self.generate_plot(9))\n            b10 = Button(text=\"10 'Box Plot'\")\n            b10.bind(on_press=lambda x: self.generate_plot(10))\n            b11 = Button(text=\"11 'Violin Plot'\")\n            b11.bind(on_press=lambda x: self.generate_plot(11))\n            b12 = Button(text=\"12 'Step Plot'\")\n            b12.bind(on_press=lambda x: self.generate_plot(12))\n            b13 = Button(text=\"13 'Error Bar Plot'\")\n            b13.bind(on_press=lambda x: self.generate_plot(13))\n            b14 = Button(text=\"14 'Polar Plot'\")\n            b14.bind(on_press=lambda x: self.generate_plot(14))\n            b15 = Button(text=\"15 'Quiver Plot'\")\n            b15.bind(on_press=lambda x: self.generate_plot(15))\n            b16 = Button(text=\"16 '3D Scatter in 3D'\")\n            b16.bind(on_press=lambda x: self.generate_plot(16))\n            b17 = Button(text=\"17 '4D Scatter in 3D'\")\n            b17.bind(on_press=lambda x: self.generate_plot(17))\n            b18 = Button(text=\"18 '5D Scatter in 3D'\")\n            b18.bind(on_press=lambda x: self.generate_plot(18))\n\n            for b in (b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18):\n                layout.add_widget(b)\n\n            return layout\n\n        def generate_plot(self, num):\n            x = [1, 2, 3, 4, 5]\n            y = [i ** 2 for i in x]\n            kwargs = {'data': (x, y), 'num': num}\n            plot_process = multiprocessing.Process(target=generate_plot, args=(kwargs,))\n            plot_process.start()\n            self.plot_processes.append(plot_process)\n\n        def on_stop(self):\n            for process in self.plot_processes:\n                if process.is_alive():\n                    process.terminate()\n            super().on_stop()\n\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n            self.plot_processes = []\n\n    PlottingApp().run()\n</code></pre>"},{"location":"Examples/Basic/basic-example/","title":"Basic Lines plot","text":"<p>This example show a basic example with 1 axis with lines.</p> <p></p> <p>example folder: 'example_basic_with_pip_install'</p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\nimport matplotlib.pyplot as plt\nimport kivy_matplotlib_widget #register all widgets to kivy register\n\nKV = '''\n\nScreen\n    figure_wgt:figure_wgt\n    BoxLayout:\n        orientation:'vertical'\n        BoxLayout:\n            size_hint_y:0.2\n            Button:\n                text:\"home\"\n                on_release:app.home()\n            ToggleButton:\n                group:'touch_mode'\n                state:'down'\n                text:\"pan\" \n                on_release:\n                    app.set_touch_mode('pan')\n                    self.state='down'\n            ToggleButton:\n                group:'touch_mode'\n                text:\"zoom box\"  \n                on_release:\n                    app.set_touch_mode('zoombox')\n                    self.state='down'                \n        MatplotFigure:\n            id:figure_wgt\n'''\n\n\nclass Test(App):\n    lines = []\n\n    def build(self):  \n        self.screen=Builder.load_string(KV)\n        return self.screen\n\n    def on_start(self, *args):\n        fig, ax1 = plt.subplots(1, 1)\n\n        ax1.plot([0,1,2,3,4], [1,2,8,9,4],label='line1')\n        ax1.plot([2,8,10,15], [15,0,2,4],label='line2')\n\n        self.screen.figure_wgt.figure = fig\n\n    def set_touch_mode(self,mode):\n        self.screen.figure_wgt.touch_mode=mode\n\n    def home(self):\n        self.screen.figure_wgt.home()\n\nTest().run()\n</code></pre>"},{"location":"Examples/Basic/subplot-example/","title":"Subplot","text":"<p>This example show how to used MatplotFigureSubplot widget when you have multiple axes or any kind of other matplotlib figure with no lines only.</p> <p></p> <p>example folder: 'example_4_differents_subplot'</p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\n\nimport matplotlib.pyplot as plt\n\nfrom kivy.metrics import dp\nimport numpy as np\n\nfrom kivy_matplotlib_widget.uix.hover_widget import add_hover,BaseHoverFloatLayout\nfrom matplotlib.ticker import FormatStrFormatter\nfrom kivy.properties import ColorProperty,NumericProperty,StringProperty\nfrom matplotlib import gridspec\nfrom numpy.random import rand\nfrom matplotlib.ticker import NullFormatter, MaxNLocator\nfrom numpy import linspace\n\n\nKV = '''\nBoxLayout:\n\n    orientation:'vertical'\n    BoxLayout:\n        size_hint_y:0.2\n        Button:\n            text:\"home\"\n            on_release:app.home()\n\n        ToggleButton:\n            group:'touch_mode'\n            state:'down'\n            text:\"pan\" \n            on_release:\n                app.set_touch_mode('pan')\n                self.state='down'    \n        ToggleButton:\n            group:'touch_mode'\n            text: 'ZoomBox'\n            on_press: \n                app.set_touch_mode('zoombox')\n                self.state='down'\n\n    BoxLayout: \n        ScreenManager:\n            id:sm\n            Screen1:\n            Screen2:\n            Screen3:\n            Screen4:\n\n    BoxLayout:\n        size_hint_y:0.1\n        Button:\n            text:\"previous screen\"\n            on_release:app.previous_screen()\n        Button:\n            text:\"next screen\"\n            on_release:app.next_screen()\n\n&lt;Screen1@Screen&gt;\n    name:'screen1'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n\n&lt;Screen2@Screen&gt; \n    name:'screen2'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n        draw_all_axes:True\n\n&lt;Screen3@Screen&gt; \n    name:'screen3'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n        draw_all_axes:True\n\n&lt;Screen4@Screen&gt; \n    name:'screen4'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        max_hover_rate:5/60\n        fast_draw:True\n        interactive_axis:True\n        draw_all_axes:True\n\n&lt;PlotlyHover2&gt;\n    custom_color: [0,0,0,1]\n    BoxLayout:\n        id:main_box\n        x:\n            root.x_hover_pos + dp(4)\n        y:\n            root.y_hover_pos - root.hover_height/2\n        size_hint: None, None\n        height: label.texture_size[1]+ dp(4)\n        width: \n            self.minimum_width + dp(12) if root.show_cursor \\\n            else dp(0.0001)            \n        orientation:'vertical'\n        padding: 0,-dp(1),0,0\n\n        canvas:            \n            Color:\n                rgba: root.custom_color if root.custom_color else [0,0,0,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n            Triangle:\n                points:\n                    [ \\\n                    root.x_hover_pos, root.y_hover_pos, \\\n                    main_box.x, root.y_hover_pos+ dp(4), \\\n                    main_box.x, root.y_hover_pos- dp(4)  \\\n                    ]\n            SmoothLine:\n                width:dp(1)\n                points:\n                    [ \\\n                    root.x_hover_pos, root.y_hover_pos, \\\n                    main_box.x, root.y_hover_pos \\\n                    ]                           \n\n        BoxLayout:\n            size_hint_x:None\n            width:label.texture_size[0]\n            padding: dp(12),0,0,0\n            Label:\n                id:label\n                text: \n                    '(' + root.label_x_value  +','+ root.label_y_value +')'\n                font_size:root.text_size\n                color:\n                    [0,0,0,1] if (root.custom_color[0]*0.299 + \\\n                    root.custom_color[1]*0.587 + root.custom_color[2]*0.114) &gt; 186/255 \\\n                    else [1,1,1,1]\n                font_name : root.text_font\n\n                font_name : root.text_font\n\n        FloatLayout:\n            size_hint: None,None\n            width: dp(0.01) \n            height: dp(0.01) \n            BoxLayout:\n                size_hint:None,None\n                x:main_box.x + main_box.width + dp(4)\n                y:main_box.y + main_box.height/2 - label3.texture_size[1]/2\n                width:label3.texture_size[0]\n                height:label3.texture_size[1]\n                Label:\n                    id:label3\n                    text: \n                        root.custom_label if root.custom_label and not '_child' in root.custom_label else ''  \n                    font_size:root.text_size\n                    color: root.text_color\n                    font_name : root.text_font      \n\n&lt;InfoHover2&gt;\n    custom_color: [0,0,0,1]\n    BoxLayout:\n        id:main_box\n        x:\n            root.x_hover_pos + dp(4) if root.x_hover_pos + dp(4) &lt; root.figwidth - label.texture_size[0] - self.padding[0] * 2 \\\n            else root.x_hover_pos - dp(4) - max(label.texture_size[0],label2.texture_size[0]) - self.padding[0] * 2\n        y:\n            root.y_hover_pos + dp(4)\n        size_hint: None, None\n        height: root.hover_height\n        width: \n            max(label.texture_size[0],label2.texture_size[0]) + dp(12) if root.show_cursor \\\n            else dp(0.0001)            \n        orientation:'vertical'\n        padding: 0,dp(4),0,dp(4)\n\n        canvas:            \n            Color:\n                rgba: root.custom_color if root.custom_color else [0,0,0,1]\n            Rectangle:\n                pos: self.pos\n                size: self.size\n            Color:\n                rgba: 0,0,0,1\n\n            Line:\n                width: 1    \n                rounded_rectangle:\n                    (self.x, self.y, self.width, self.height,\\\n                    dp(4), dp(4), dp(4), dp(4),\\\n                    self.height)                 \n\n\n        canvas.after:            \n            Color:\n                rgba: 0,0,0,1\n            Rectangle:\n                size: (dp(8),dp(8))\n                pos: \n                    (root.x_hover_pos-dp(8/2), \\\n                     root.y_hover_pos-dp(8/2))\n\n        BoxLayout:\n            size_hint_x:None\n            width:label.texture_size[0]\n            padding: dp(12),0,0,0\n            Label:\n                id:label\n                text: \n                    root.label_x + ': ' + root.label_x_value  \n                font_size:root.text_size\n                color:\n                    [0,0,0,1] if (root.custom_color[0]*0.299 + \\\n                    root.custom_color[1]*0.587 + root.custom_color[2]*0.114) &gt; 186/255 \\\n                    else [1,1,1,1]\n                font_name : root.text_font\n\n        BoxLayout:\n            size_hint_x:None\n            width:label2.texture_size[0]   \n            padding: dp(12),0,0,0\n            Label:\n                id:label2\n                text:\n                    root.label_y + ': ' + root.label_y_value    \n                font_size:root.text_size\n                color:\n                    [0,0,0,1] if (root.custom_color[0]*0.299 + \\\n                    root.custom_color[1]*0.587 + root.custom_color[2]*0.114) &gt; 186/255 \\\n                    else [1,1,1,1]\n                font_name : root.text_font\n        FloatLayout:\n            size_hint: None,None\n            width: dp(0.01) \n            height: dp(0.01) \n            BoxLayout:\n                size_hint:None,None\n                x:main_box.x + main_box.width + dp(4)\n                y:main_box.y + main_box.height - label3.texture_size[1]\n                width:label3.texture_size[0]\n                height:label3.texture_size[1]\n                Label:\n                    id:label3\n                    text: \n                        root.custom_label if root.custom_label and not '_child' in root.custom_label else ''  \n                    font_size:root.text_size\n                    color: root.text_color\n                    font_name : root.text_font  \n\n'''\n\nclass PlotlyHover2(BaseHoverFloatLayout):\n    \"\"\" PlotlyHover adapt the background and the font color with the line or scatter color\"\"\" \n    text_color=ColorProperty([0,0,0,1])\n    text_font=StringProperty(\"Roboto\")\n    text_size = NumericProperty(dp(14))\n    hover_height = NumericProperty(dp(24))\n\n\n    def __init__(self, **kwargs):\n        \"\"\" init class \"\"\"\n        super().__init__(**kwargs)  \n\nclass InfoHover2(BaseHoverFloatLayout):\n    \"\"\" InfoHover adapt the background and the font color with the line or scatter color\"\"\" \n    text_color=ColorProperty([0,0,0,1])\n    text_font=StringProperty(\"Roboto\")\n    text_size = NumericProperty(dp(14))\n    hover_height = NumericProperty(dp(48))\n\n    def __init__(self, **kwargs):\n        \"\"\" init class \"\"\"\n        super().__init__(**kwargs)     \n\nclass Test(App):\n    lines = []\n\n    def build(self):\n        self.graph_app = Builder.load_string(KV)\n        return self.graph_app\n\n\n    def on_start(self, *args):\n\n# =============================================================================\n#         figure 1 - screen1\n# =============================================================================\n        x = np.linspace(0, 2 * np.pi, 400)\n        y = np.sin(x ** 2)\n\n        fig, axs = plt.subplots(2, 2)\n        axs[0, 0].plot(x, y)\n        axs[0, 0].set_title('Axis [0, 0]')\n        axs[0, 1].plot(x, y, 'tab:orange')\n        axs[0, 1].set_title('Axis [0, 1]')\n        axs[1, 0].plot(x, -y, 'tab:green')\n        axs[1, 0].set_title('Axis [1, 0]')\n        axs[1, 1].plot(x, -y, 'tab:red')\n        axs[1, 1].set_title('Axis [1, 1]')\n\n        axs[1, 1].set_xlim(2,10)\n\n        for ax in axs.flat:\n            ax.set(xlabel='x-label', ylabel='y-label')\n\n        # Hide x labels and tick labels for top plots and y ticks for right plots.\n        for ax in axs.flat:\n            ax.label_outer()\n\n        screen1=self.graph_app.ids.sm.get_screen('screen1')\n        screen1.figure_wgt.figure = fig\n        screen1.figure_wgt.cursor_xaxis_formatter = FormatStrFormatter('%.1f') \n        screen1.figure_wgt.cursor_yaxis_formatter = FormatStrFormatter('%.1f') \n\n        screen1.figure_wgt.register_cursor()\n\n        add_hover(screen1.figure_wgt,mode='desktop',hover_widget=PlotlyHover2())\n\n# =============================================================================\n#         figure 2 - screen2\n# =============================================================================\n        x = np.linspace(0, 2 * np.pi, 400)\n        y = np.sin(x ** 2)\n\n        fig2 = plt.figure()\n        # set height ratios for subplots\n        gs = gridspec.GridSpec(2, 1, height_ratios=[2, 1]) \n\n        # the first subplot\n        ax0 = plt.subplot(gs[0])\n        # log scale for axis Y of the first subplot\n        ax0.set_yscale(\"log\")\n        line0, = ax0.plot(x, y, color='r',label='red line')\n\n        # the second subplot\n        # shared axis X\n        ax1 = plt.subplot(gs[1], sharex = ax0)\n        line1, = ax1.plot(x, y, color='b', linestyle='--',label='red line')\n        plt.setp(ax0.get_xticklabels(), visible=False)\n        # remove last tick label for the second subplot\n        yticks = ax1.yaxis.get_major_ticks()\n        yticks[-1].label1.set_visible(False)\n\n        # put legend on first subplot\n        ax0.legend((line0, line1), ('red line', 'blue line'), loc='lower left')\n\n        # remove vertical gap between subplots\n        plt.subplots_adjust(hspace=.0)\n\n        screen2=self.graph_app.ids.sm.get_screen('screen2')\n        screen2.figure_wgt.figure = fig2\n        screen2.figure_wgt.cursor_xaxis_formatter = FormatStrFormatter('%.1f') \n        screen2.figure_wgt.cursor_yaxis_formatter = FormatStrFormatter('%.1f') \n\n        screen2.figure_wgt.register_cursor()\n\n        add_hover(screen2.figure_wgt,mode='desktop',hover_widget=PlotlyHover2())\n\n# =============================================================================\n#         figure 3 - screen3\n# =============================================================================\n\n        # create all axes we need\n        ax0 = plt.subplot(211)\n        ax1 = ax0.twinx()\n        ax2 = plt.subplot(212)\n        ax3 = ax2.twinx()\n\n        # share the secondary axes\n        if hasattr(ax1,'sharey'):\n            ax1.sharey(ax3)\n        else:\n            ax1.get_shared_y_axes().join(ax1, ax3)\n\n\n        ax0.plot(rand(1) * rand(10),'r')\n        ax1.plot(10*rand(1) * rand(10),'b')\n        ax2.plot(3*rand(1) * rand(10),'g')\n        ax3.plot(10*rand(1) * rand(10),'y')\n        fig3=plt.gcf()\n\n        screen3=self.graph_app.ids.sm.get_screen('screen3')\n        screen3.figure_wgt.figure = fig3\n        screen3.figure_wgt.cursor_xaxis_formatter = FormatStrFormatter('%.1f') \n        screen3.figure_wgt.cursor_yaxis_formatter = FormatStrFormatter('%.1f') \n\n        screen3.figure_wgt.register_cursor()\n\n        add_hover(screen3.figure_wgt,mode='desktop',hover_widget=PlotlyHover2())\n\n# =============================================================================\n#         figure 4 - screen4\n# =============================================================================\n\n        # Define a function to make the ellipses\n        def ellipse(ra,rb,ang,x0,y0,Nb=100):\n            xpos,ypos=x0,y0\n            radm,radn=ra,rb\n            an=ang\n            co,si=np.cos(an),np.sin(an)\n            the=linspace(0,2*np.pi,Nb)\n            X=radm*np.cos(the)*co-si*radn*np.sin(the)+xpos\n            Y=radm*np.cos(the)*si+co*radn*np.sin(the)+ypos\n            return X,Y\n\n        # Define the x and y data \n        # For example just using random numbers\n        x = np.random.randn(10000)\n        y = np.random.randn(10000)\n\n        # Set up default x and y limits\n        xlims = [min(x),max(x)]\n        ylims = [min(y),max(y)]\n\n        # Set up your x and y labels\n        xlabel = '$\\mathrm{Your\\\\ X\\\\ Label}$'\n        ylabel = '$\\mathrm{Your\\\\ Y\\\\ Label}$'\n\n        # Define the locations for the axes\n        left, width = 0.12, 0.55\n        bottom, height = 0.12, 0.55\n        bottom_h = left_h = left+width+0.02\n\n        # Set up the geometry of the three plots\n        rect_temperature = [left, bottom, width, height] # dimensions of temp plot\n        rect_histx = [left, bottom_h, width, 0.25] # dimensions of x-histogram\n        rect_histy = [left_h, bottom, 0.25, height] # dimensions of y-histogram\n\n        # Set up the size of the figure\n        fig4 = plt.figure(1, figsize=(9.5,9))\n\n        # Make the three plots\n        axTemperature = plt.axes(rect_temperature) # temperature plot\n        axHistx = plt.axes(rect_histx, sharex = axTemperature) # x histogram\n        axHisty = plt.axes(rect_histy, sharey = axTemperature) # y histogram\n\n\n        # Remove the inner axes numbers of the histograms\n        nullfmt = NullFormatter()\n        axHistx.xaxis.set_major_formatter(nullfmt)\n        axHisty.yaxis.set_major_formatter(nullfmt)\n\n        # Find the min/max of the data\n        xmin = min(xlims)\n        xmax = max(xlims)\n        ymin = min(ylims)\n        ymax = max(y)\n\n        # Make the 'main' temperature plot\n        # Define the number of bins\n        nxbins = 50\n        nybins = 50\n        nbins = 100\n\n        xbins = linspace(start = xmin, stop = xmax, num = nxbins)\n        ybins = linspace(start = ymin, stop = ymax, num = nybins)\n        xcenter = (xbins[0:-1]+xbins[1:])/2.0\n        ycenter = (ybins[0:-1]+ybins[1:])/2.0\n\n        H, xedges,yedges = np.histogram2d(y,x,bins=(ybins,xbins))\n        X = xcenter\n        Y = ycenter\n        Z = H\n\n        # Plot the temperature data\n        cax = (axTemperature.imshow(H, extent=[xmin,xmax,ymin,ymax],\n               interpolation='nearest', origin='lower',aspect='auto'))\n\n        # Plot the temperature plot contours\n        contourcolor = 'w'\n        xcenter = np.mean(x)\n        ycenter = np.mean(y)\n        ra = np.std(x)\n        rb = np.std(y)\n        ang = 0\n\n        X,Y=ellipse(ra,rb,ang,xcenter,ycenter)\n        axTemperature.plot(X,Y,\":\",color = contourcolor,ms=1,linewidth=2.0)\n        axTemperature.annotate('$1\\\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10),\n                               textcoords='offset points', horizontalalignment='right',\n                               verticalalignment='bottom',fontsize=25)\n\n        X,Y=ellipse(2*ra,2*rb,ang,xcenter,ycenter)\n        axTemperature.plot(X,Y,\":\",color = contourcolor,ms=1,linewidth=2.0)\n        axTemperature.annotate('$2\\\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10),\n                               textcoords='offset points',horizontalalignment='right',\n                               verticalalignment='bottom',fontsize=25, color = contourcolor)\n\n        X,Y=ellipse(3*ra,3*rb,ang,xcenter,ycenter)\n        axTemperature.plot(X,Y,\":\",color = contourcolor, ms=1,linewidth=2.0)\n        axTemperature.annotate('$3\\\\sigma$', xy=(X[15], Y[15]), xycoords='data',xytext=(10, 10),\n                               textcoords='offset points',horizontalalignment='right',\n                               verticalalignment='bottom',fontsize=25, color = contourcolor)\n\n        #Plot the axes labels\n        axTemperature.set_xlabel(xlabel,fontsize=25)\n        axTemperature.set_ylabel(ylabel,fontsize=25)      \n\n        #Make the tickmarks pretty\n        ticklabels = axTemperature.get_xticklabels()\n        for label in ticklabels:\n            label.set_fontsize(18)\n            label.set_family('serif')\n\n        ticklabels = axTemperature.get_yticklabels()\n        for label in ticklabels:\n            label.set_fontsize(18)\n            label.set_family('serif')\n\n        #Set up the plot limits\n        axTemperature.set_xlim(xlims)\n        axTemperature.set_ylim(ylims)\n\n        #Set up the histogram bins\n        xbins = np.arange(xmin, xmax, (xmax-xmin)/nbins)\n        ybins = np.arange(ymin, ymax, (ymax-ymin)/nbins)\n\n        #Plot the histograms\n        axHistx.hist(x, bins=xbins, color = 'blue')\n        axHisty.hist(y, bins=ybins, orientation='horizontal', color = 'red')\n\n        #Set up the histogram limits\n        axHistx.set_xlim( min(x), max(x) )\n        axHisty.set_ylim( min(y), max(y) )\n\n        #Make the tickmarks pretty\n        ticklabels = axHistx.get_yticklabels()\n        for label in ticklabels:\n            label.set_fontsize(12)\n            label.set_family('serif')\n\n        #Make the tickmarks pretty\n        ticklabels = axHisty.get_xticklabels()\n        for label in ticklabels:\n            label.set_fontsize(12)\n            label.set_family('serif')\n\n        #Cool trick that changes the number of tickmarks for the histogram axes\n        axHisty.xaxis.set_major_locator(MaxNLocator(4))\n        axHistx.yaxis.set_major_locator(MaxNLocator(4))\n        fig4=plt.gcf()\n\n        screen4=self.graph_app.ids.sm.get_screen('screen4')\n        screen4.figure_wgt.figure = fig4\n        screen4.figure_wgt.cursor_xaxis_formatter = FormatStrFormatter('%.1f') \n        screen4.figure_wgt.cursor_yaxis_formatter = FormatStrFormatter('%.1f') \n\n        screen4.figure_wgt.register_cursor()\n\n        add_hover(screen4.figure_wgt,mode='desktop',hover_widget=InfoHover2())\n\n\n    def set_touch_mode(self,mode):\n        for screen in self.graph_app.ids.sm.screens:\n            if hasattr(screen,'figure_wgt'):\n                screen.figure_wgt.touch_mode=mode\n\n    def home(self):\n        screen=self.graph_app.ids.sm.current_screen\n        screen.figure_wgt.main_home()\n\n    def previous_screen(self):\n        screen_name=self.graph_app.ids.sm.current\n        screen_number = int(screen_name[-1])\n        if screen_number&lt;=1:\n            screen_number=4\n        else:\n            screen_number-=1\n\n        self.graph_app.ids.sm.current = 'screen' + str(screen_number)        \n\n    def next_screen(self):\n        screen_name=self.graph_app.ids.sm.current\n        screen_number = int(screen_name[-1])\n        if screen_number&gt;=4:\n            screen_number=1\n        else:\n            screen_number+=1\n\n        self.graph_app.ids.sm.current = 'screen' + str(screen_number)\n\n\nTest().run()\n</code></pre>"},{"location":"Examples/Hover/kivy-hover/","title":"Kivy hover","text":"<p>This example show how to used a kivy hover. This kind of widget can easily be customize for your purpose. See hover widgets in the library and the examples to customize your widgets (link) Because it use kivy to render the cursor, it will not interfer with matplotlib draw or blit method. Nearest and compare hover can be also used in your matplotlib figure just like ploty library.</p> <p></p>"},{"location":"Examples/Hover/kivy-hover/#add_hover-function","title":"add_hover function","text":"<p>To activate the hover feature, you need to use the add_hover function. This can be import as follow:</p> <pre><code>from kivy_matplotlib_widget.uix.hover_widget import add_hover\n</code></pre> <p>This function require 1 input, the figure instance <pre><code>add_hover(fig)\n</code></pre></p> <p>other options are also available with this function</p> <ul> <li>mode (str) : mode behavior (option: 'touch', 'desktop'. Default 'touch')</li> <li>hover_type :  type of hover (option: 'nearest', 'compare'. Default 'nearest')</li> <li>hover_widget :  hover widget used (Default nearest: GeneralHover. Default compare: GeneralCompareHover)</li> </ul>"},{"location":"Examples/Hover/kivy-hover/#available-hover-widget","title":"available hover widget","text":"<p>kivy_matplotib_widget have several hover  include</p> <pre><code>from kivy_matplotlib_widget.uix.hover_widget import (GeneralHover,\n                                                    HoverVerticalText,\n                                                    InfoHover,\n                                                    GeneralCompareHover,\n                                                    TagCompareHover,\n                                                    MatplotlibStyleHover\n                                                    )\n</code></pre> Hover widget Description <code>GeneralHover</code> General hover with vertical line (text is horizontal) <code>HoverVerticalText</code> hover with vertical text (x and y use 2 rows) <code>InfoHover</code> hover with extra information <code>GeneralCompareHover</code> General compare hover (all the values are inside a box) <code>TagCompareHover</code> Plotly look-a-like compar hover <code>MatplotlibStyleHover</code> hover like matplotlib cursor (horizontal and vertica line + text outside axis) <p>Note</p> <p>If you want to customized a hover for your purpose, you can create a new hover widget base on the source code and use it into the add_hover function.</p>"},{"location":"Examples/Hover/kivy-hover/#example-with-nearest-and-compare-hover","title":"Example with nearest and compare hover","text":"<p>based on 'example_compare_hover' example</p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\nfrom kivy_matplotlib_widget.uix.hover_widget import add_hover,HoverVerticalText,InfoHover,TagCompareHover\nfrom matplotlib.ticker import FormatStrFormatter\n\n#generate 2 figures\nimport matplotlib.pyplot as plt\nfig, ax1 = plt.subplots(1, 1)\nax1.plot([0,1,2,3], [1,2,8,9],label='line1')\nax1.plot([0,1,2,3,4], [10,11,8.1,20,21],label='line2')\nax1.plot([0,1,2,3,4], [10,10.5,8.2,25,15],label='line3')\nfig.subplots_adjust(left=0.13,top=0.9,right=0.93,bottom=0.2)\n\nfig2, ax2 = plt.subplots(1, 1)\nax2.plot([0,1,2,3], [1,2,8,9],label='line1')\nax2.plot([0,1,2,3,4], [10,11,8.1,20,21],label='line2')\nax2.plot([0,1,2,3,4], [10,10.5,8.2,25,15],label='line3')\nfig2.subplots_adjust(left=0.13,top=0.9,right=0.93,bottom=0.2)\n\nKV = '''\nScreen\n    figure_wgt:figure_wgt\n    figure_wgt2:figure_wgt2\n    BoxLayout:\n        orientation:'vertical'\n        BoxLayout:\n            size_hint_y:0.15\n            Button:\n                text:\"home\"\n                on_release:app.home()\n            ToggleButton:\n                group:'touch_mode'\n                state:'down'\n                text:\"pan\" \n                on_release:\n                    app.set_touch_mode('pan')\n                    self.state='down'\n            ToggleButton:\n                group:'touch_mode'\n                text:\"zoom box\"  \n                on_release:\n                    app.set_touch_mode('zoombox')\n                    self.state='down'  \n\n        BoxLayout:\n            size_hint_y:0.15\n            ToggleButton:\n                group:'hover_mode'\n                text:\"nearest hover\"  \n                on_release:\n                    app.change_hover_type('nearest')\n                    self.state='down' \n            ToggleButton:\n                group:'hover_mode'\n                text:\"compare hover\"  \n                state:'down'\n                on_release:\n                    app.change_hover_type('compare')\n                    self.state='down'                    \n\n        MatplotFigure:\n            id:figure_wgt \n\n        MatplotFigure:\n            id:figure_wgt2                   \n'''\n\nclass Test(App):\n\n    def build(self):  \n        self.screen=Builder.load_string(KV)\n        return self.screen\n\n    def on_start(self, *args):\n        self.screen.figure_wgt.figure = fig\n\n        ax=self.screen.figure_wgt.figure.axes[0]\n        self.screen.figure_wgt.register_lines(list(ax.get_lines()))\n        ax.set_title('General compare hover')\n\n        #set x/y formatter for hover data\n        self.screen.figure_wgt.cursor_xaxis_formatter = FormatStrFormatter('%.2f')\n        self.screen.figure_wgt.cursor_yaxis_formatter = FormatStrFormatter('%.1f')  \n\n        #add compare hover\n        add_hover(self.screen.figure_wgt,mode='desktop',hover_type='compare')        \n\n        ##figure2\n        self.screen.figure_wgt2.figure = fig2\n\n        ax=self.screen.figure_wgt2.figure.axes[0]\n        self.screen.figure_wgt2.register_lines(list(ax.get_lines()))\n        ax.set_title('Tag compare hover')\n\n        #set x/y formatter for hover data\n        self.screen.figure_wgt2.cursor_xaxis_formatter = FormatStrFormatter('%.2f')\n        self.screen.figure_wgt2.cursor_yaxis_formatter = FormatStrFormatter('%.1f')  \n\n        #add compare hover\n        add_hover(self.screen.figure_wgt2,mode='desktop',hover_type='compare',hover_widget=TagCompareHover()) \n\n    def set_touch_mode(self,mode):\n        self.screen.figure_wgt.touch_mode=mode\n        self.screen.figure_wgt2.touch_mode=mode\n\n    def home(self):\n        self.screen.figure_wgt.home()\n        self.screen.figure_wgt2.home()\n\n    def change_hover_type(self,hover_type):\n        add_hover(self.screen.figure_wgt,mode='desktop',hover_type=hover_type)\n        add_hover(self.screen.figure_wgt2,mode='desktop',hover_type=hover_type)\n\nTest().run()\n</code></pre>"},{"location":"Examples/Hover/matplotlib-cursor/","title":"Matplotlib cursor","text":"<p>This example show how to used a basic matplotlib cursor. This cursor use matplotlib blit method.</p> <p></p> <p>based on 'example_cursor' example</p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\nimport kivy_matplotlib_widget  #register all widgets to kivy register\n\n#generate figure\nimport matplotlib.pyplot as plt\nfig, ax1 = plt.subplots(1, 1)\nline1, = ax1.plot([0,1,2,3,4], [1,2,8,9,4],label='line1')\nline2, = ax1.plot([2,8,10,15], [15,0,2,4],label='line2')\nfig.subplots_adjust(left=0.13,top=0.96,right=0.93,bottom=0.2)\n\nKV = '''\n\nScreen\n    figure_wgt:figure_wgt\n    BoxLayout:\n        orientation:'vertical'\n        BoxLayout:\n            size_hint_y:0.2\n            Button:\n                text:\"home\"\n                on_release:app.home()\n            ToggleButton:\n                group:'touch_mode'\n                state:'down'\n                text:\"pan\" \n                on_press:\n                    app.set_touch_mode('pan')\n                    self.state='down'\n            ToggleButton:\n                group:'touch_mode'\n                text:\"cursor\"  \n                on_press:\n                    app.set_touch_mode('cursor')\n                    self.state='down'                \n        MatplotFigure:\n            id:figure_wgt\n            #update axis during pan/zoom\n            fast_draw:False\n'''\n\n\nclass Test(App):\n    lines = []\n\n    def build(self):  \n        self.screen=Builder.load_string(KV)\n        return self.screen\n\n    def on_start(self, *args):\n        self.screen.figure_wgt.figure = fig\n\n        #register lines instance if need to be update\n        self.lines.append(line1)\n        self.lines.append(line2)\n\n        self.screen.figure_wgt.register_lines(self.lines)\n\n    def set_touch_mode(self,mode):\n        self.screen.figure_wgt.touch_mode=mode\n\n    def home(self):\n        self.screen.figure_wgt.home()\n\nTest().run()\n</code></pre>"},{"location":"Examples/Legend/advanced-matplotlib-legend/","title":"Advanced legend","text":"<p>This section show how to create interactive legend for these cases:</p> <ul> <li>Twinx figure</li> <li>2 legends in same axis</li> <li>group legend</li> </ul> <p></p>"},{"location":"Examples/Legend/advanced-matplotlib-legend/#example","title":"Example","text":"<p>based on 'example_advance_interactive_legend' example  </p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\n\nimport matplotlib.pyplot as plt\n\nfrom kivy_matplotlib_widget.uix.legend_widget import MatplotlibInteractiveLegend  #also register all widgets to kivy register\n\n\nKV = '''\nBoxLayout:\n\n    orientation:'vertical'\n    BoxLayout:\n        size_hint_y:0.2\n        Button:\n            text:\"home\"\n            on_release:app.home()\n\n        ToggleButton:\n            group:'touch_mode'\n            state:'down'\n            text:\"pan\" \n            on_release:\n                app.set_touch_mode('pan')\n                self.state='down'    \n        ToggleButton:\n            group:'touch_mode'\n            text: 'ZoomBox'\n            on_press: \n                app.set_touch_mode('zoombox')\n                self.state='down'\n        ToggleButton:\n            group:'touch_mode'\n            text:\"drag legend\"  \n            on_release:\n                app.set_touch_mode('drag_legend')\n                self.state='down'                  \n\n    BoxLayout: \n        ScreenManager:\n            id:sm\n            Screen1:\n            Screen2:\n            Screen3:\n\n    BoxLayout:\n        size_hint_y:0.1\n        Button:\n            text:\"previous screen\"\n            on_release:app.previous_screen()\n        Button:\n            text:\"next screen\"\n            on_release:app.next_screen()\n\n&lt;Screen1@Screen&gt;\n    name:'screen1'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n\n&lt;Screen2@Screen&gt; \n    name:'screen2'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n        draw_all_axes:True\n\n&lt;Screen3@Screen&gt; \n    name:'screen3'  \n    figure_wgt:figure_wgt                  \n    MatplotFigureSubplot:\n        id:figure_wgt\n        fast_draw:True\n        interactive_axis:True\n        draw_all_axes:True\n\n'''\n\nclass Test(App):\n    def build(self):\n        self.graph_app = Builder.load_string(KV)\n        return self.graph_app\n\n    def on_start(self, *args):\n\n# =============================================================================\n#         figure 1 - screen1 - example with twin axis\n# =============================================================================\n        fig, ax1 = plt.subplots(1, 1)\n\n        plt.title('Twin axis legend')\n\n        ax1.plot([0,1,2,3,4], [1,2,8,9,4],label='line1')\n        ax1.scatter([2,8,10,15], [15,0,2,4],label='line2')\n        ax2=ax1.twinx()\n        ax2.plot([2,8,10,15], [15,0,2,4],c='r',label='line3')\n\n        lines, labels = ax1.get_legend_handles_labels()\n        lines2, labels2 = ax2.get_legend_handles_labels()\n        leg=ax2.legend(lines + lines2, labels + labels2, loc=4)\n\n        screen1=self.graph_app.ids.sm.get_screen('screen1')\n        screen1.figure_wgt.figure = fig\n\n        MatplotlibInteractiveLegend(screen1.figure_wgt,\n                                    legend_instance=leg)\n# =============================================================================\n#         figure 2 - screen2 - example with 2 legends in same axis\n# =============================================================================\n        fig2, ax3 = plt.subplots()\n        plt.title('2 legends in same axis')\n\n        line1, = ax3.plot([1, 2, 3], label=\"Line 1\", linestyle='--')\n        line2, = ax3.plot([3, 2, 1], label=\"Line 2\", linewidth=4)\n\n        # Create a legend for the first line.\n        first_legend = ax3.legend(handles=[line1], loc='upper right')\n\n        # Add the legend manually to the Axes.\n        ax3.add_artist(first_legend)\n\n        # Create another legend for the second line.\n        second_legend = ax3.legend(handles=[line2], loc='lower right')\n\n        screen2=self.graph_app.ids.sm.get_screen('screen2')\n        screen2.figure_wgt.figure = fig2\n\n        MatplotlibInteractiveLegend(screen2.figure_wgt,\n                                    legend_instance=first_legend,\n                                    custom_handlers=[line1])\n\n        MatplotlibInteractiveLegend(screen2.figure_wgt,\n                                    legend_instance=second_legend,\n                                    custom_handlers=[line2],multi_legend=True)  \n\n# =============================================================================\n#         figure 3 - screen3 - group legend\n# =============================================================================\n\n        # create all axes we need\n        fig3, ax4 = plt.subplots()\n        plt.title('Group legend')\n\n        line1, = ax4.plot([1, 2, 3], c='b', label=\"Line 1\", linestyle='--')\n        line2, = ax4.plot([3, 2, 1], c='b', label=\"Line 2\", linewidth=4)\n        line3, = ax4.plot([2, 3, 4], c='b', label=\"Line 3\", linestyle='--')\n\n        line4, = ax4.plot([0.5,1, 6], c='r', label=\"Line 4\", linestyle='--')\n        line5, = ax4.plot([2, 4.5, 5.5], c='r',label=\"Line 5\", linewidth=4)\n\n        import matplotlib.patches as mpatches\n        blue_patch = mpatches.Patch(color='blue', label='The bue data')\n        red_patch = mpatches.Patch(color='red', label='The red data')\n\n        # Create a legend \n        leg3 = ax4.legend(handles=[blue_patch,red_patch],labels=['blue','red'], loc='upper right')\n\n        screen3=self.graph_app.ids.sm.get_screen('screen3')\n        screen3.figure_wgt.figure = fig3\n\n        MatplotlibInteractiveLegend(screen3.figure_wgt,\n                                    legend_instance=leg3,\n                                    custom_handlers=[[line1,line2,line3],[line4,line5]])\n\n    def set_touch_mode(self,mode):\n        for screen in self.graph_app.ids.sm.screens:\n            if hasattr(screen,'figure_wgt'):\n                screen.figure_wgt.touch_mode=mode\n\n    def home(self):\n        screen=self.graph_app.ids.sm.current_screen\n        screen.figure_wgt.main_home()\n\n    def previous_screen(self):\n        screen_name=self.graph_app.ids.sm.current\n        screen_number = int(screen_name[-1])\n        if screen_number&lt;=1:\n            screen_number=3\n        else:\n            screen_number-=1\n\n        self.graph_app.ids.sm.current = 'screen' + str(screen_number)        \n\n    def next_screen(self):\n        screen_name=self.graph_app.ids.sm.current\n        screen_number = int(screen_name[-1])\n        if screen_number&gt;=3:\n            screen_number=1\n        else:\n            screen_number+=1\n\n        self.graph_app.ids.sm.current = 'screen' + str(screen_number)\n\n\nTest().run()\n</code></pre>"},{"location":"Examples/Legend/matplotlib-legend/","title":"Basic legend","text":"<p>This section show how to convert your matplotlib legend into interactive legend.</p> <p></p>"},{"location":"Examples/Legend/matplotlib-legend/#matplotlibinteractivelegend-function","title":"MatplotlibInteractiveLegend function","text":"<p>To activate the interactive matplotlib legend feature, you need to use the MatplotlibInteractiveLegend function. This can be import as follow:</p> <pre><code>from kivy_matplotlib_widget.uix.legend_widget import MatplotlibInteractiveLegend \n</code></pre> <p>This function require 1 input, the figure instance <pre><code>MatplotlibInteractiveLegend(fig)\n</code></pre></p> <p>other options are also available with this function</p> <ul> <li>legend_instance (obj or list) : matplotlib legend instance (optional)</li> <li>custom_handlers (list) : list of matplotlib plot instances (line,scatter,bar...)</li> </ul>"},{"location":"Examples/Legend/matplotlib-legend/#touch-behavior","title":"touch behavior","text":"<ul> <li>single tap : hide or show selected line</li> <li>double tap : show all lines if selected line is the only visible line, otherwise it isolate the selected line</li> </ul>"},{"location":"Examples/Legend/matplotlib-legend/#example","title":"Example","text":"<p>based on 'example_legend_matplotlib' example</p> <pre><code>import matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom kivy.metrics import dp\n\n#optimized draw on Agg backend\nmpl.rcParams['path.simplify'] = True\nmpl.rcParams['path.simplify_threshold'] = 1.0\nmpl.rcParams['agg.path.chunksize'] = 1000\n\nfont_size_axis_title=dp(13)\nfont_size_axis_tick=dp(12)        \n\nseaborn_package=True\ntry:\n    import seaborn as sns\nexcept:\n    seaborn_package=False\n\n#avoid conflict between mouse provider and touch (very important with touch device)\nfrom kivy.config import Config\nConfig.set('input', 'mouse', 'mouse,disable_on_activity')\n\nfrom kivy.lang import Builder\nfrom kivy.app import App\nfrom kivy.core.window import Window\nimport numpy as np\nfrom random import randint\nfrom kivy_matplotlib_widget.uix.legend_widget import MatplotlibInteractiveLegend  #also register all widgets to kivy register\n\nKV = '''\n\nScreen\n    figure_wgt1:figure_wgt1\n    figure_wgt2:figure_wgt2\n    figure_wgt3:figure_wgt3\n    figure_wgt4:figure_wgt4\n\n    BoxLayout:\n        orientation:'vertical'\n        BoxLayout:\n            size_hint_y:0.3\n            Button:\n                text:\"home\"\n                on_release:app.home()\n            ToggleButton:\n                group:'touch_mode'\n                state:'down'\n                text:\"pan\" \n                on_release:\n                    app.set_touch_mode('pan')\n                    self.state='down'\n            ToggleButton:\n                group:'touch_mode'\n                text:\"zoom box\"  \n                on_release:\n                    app.set_touch_mode('zoombox')\n                    self.state='down' \n            ToggleButton:\n                group:'touch_mode'\n                text:\"drag legend\"  \n                on_release:\n                    app.set_touch_mode('drag_legend')\n                    self.state='down'                     \n\n        BoxLayout:\n            orientation:'vertical'\n            BoxLayout:\n                MatplotFigure:\n                    id:figure_wgt1\n                    legend_do_scroll_x:False\n                MatplotFigure:\n                    id:figure_wgt2\n            BoxLayout:\n                MatplotFigure:\n                    id:figure_wgt3\n\n                MatplotFigure:\n                    id:figure_wgt4                  \n\n'''\n\n\nclass Test(App):\n    lines = []\n    instance_dict = dict()\n\n    def build(self):  \n        self.screen=Builder.load_string(KV)\n        return self.screen\n\n    def on_start(self, *args):\n\n\n        fig, ax = plt.subplots(1, 1)\n        fig.subplots_adjust(right=0.7)\n\n\n        for i in range(10):\n            x=[randint(0, 9) for p in range(0, 10)]\n            x.sort()\n            y=[randint(0, 9) for p in range(0, 10)]\n            ax.plot(x, y,label='line' + str(i+1))\n\n        self.screen.figure_wgt1.figure = ax.figure\n        ax.legend(loc=(1.04, -0.2))\n\n        MatplotlibInteractiveLegend(self.screen.figure_wgt1)\n\n        fig2, ax2 = plt.subplots(1, 1)\n\n        x = [2,4,5,7,6,8,9,11,12,12]\n        y = [1,2,3,4,5,6,7,8,9,10]\n\n        sc1 = ax2.scatter(x, y, s=30, color='magenta', alpha=0.7, marker='x', picker=3,label='scatter')\n        sc2 = ax2.scatter(np.array(x)+2, np.array(y)+1, s=30, color='r', alpha=0.7, marker='x', picker=3,label='scatter2')\n        sc3 = ax2.scatter(np.array(x)+3, np.array(y)+3, s=30, color='k', alpha=0.7, marker='x', picker=3,label='scatter3')\n        ax2.legend(loc=4)\n\n        self.screen.figure_wgt2.figure = ax2.figure\n        self.screen.figure_wgt2.fast_draw = False #update axis during pan/zoom\n\n        MatplotlibInteractiveLegend(self.screen.figure_wgt2)\n\n        fig3, ax3 = plt.subplots(1, 1)\n        x = np.linspace(0, 1)\n\n        # Plot the lines y=x**n for n=1..4.\n        for n in range(1, 5):\n            ax3.plot(x, x**n, label=\"n={0}\".format(n))\n        ax3.legend(loc=\"upper left\",\n                    ncol=2, shadow=True, title=\"Legend\", fancybox=True)\n        ax3.get_legend().get_title().set_color(\"red\")\n\n        self.screen.figure_wgt3.figure = ax3.figure\n\n        MatplotlibInteractiveLegend(self.screen.figure_wgt3)\n\n        fig4, ax4 = plt.subplots(1, 1)\n        if seaborn_package:\n            df = sns.load_dataset(\"penguins\")\n            sns.barplot(ax=ax4,data=df, x=\"island\", y=\"body_mass_g\", hue=\"sex\")\n        self.screen.figure_wgt4.figure = ax4.figure\n        self.screen.figure_wgt4.fast_draw = False #update axis during pan/zoom \n        ax4.legend(title=\"sex\",loc=1)                            \n        MatplotlibInteractiveLegend(self.screen.figure_wgt4,legend_handles='variante')\n\n\n    def set_touch_mode(self,mode):\n        self.screen.figure_wgt1.touch_mode=mode\n        self.screen.figure_wgt2.touch_mode=mode\n        self.screen.figure_wgt3.touch_mode=mode\n        self.screen.figure_wgt4.touch_mode=mode\n\n    def home(self):\n        self.screen.figure_wgt1.home()\n        self.screen.figure_wgt2.home()\n        self.screen.figure_wgt3.home()\n        self.screen.figure_wgt4.home()\n\nTest().run()\n</code></pre>"},{"location":"Examples/List/list_examples/","title":"List of all available examples","text":"<p>This is the list of all available examples in this library.</p> Example Description <code>example_3D</code> for 3D matplotlib figure <code>example_4_differents_subplot</code> Differents figures with multiple axes or figure with no lines only <code>example_advance_interactive_legend</code> More advanced insteractive matplotlib legend <code>example_all_interactive_options</code> Figure with all interactives features <code>example_all_selectors</code> Example with all kivy selectors tools <code>example_basic</code> Basic example with lines and 1 axis (when the library is not install and copy in your project) <code>example_basic_with_pip_install</code> Basic example with lines and 1 axis (used kivy_matploltib_widget library <code>example_big_data</code> Basic example with lines and 1 axis with big data optimization <code>example_compare_hover</code> Example with nearest and compare hover <code>example_cursor</code> Basic example with matplotlib cursor <code>example_cursor_scatter</code> Basic example with scatter figure and matplotlib cursor (MatplotFigureScatter) <code>example_custom_touch_widget</code> Example with custom touch widget (line edit prop and line distance) <code>example_hover</code> Example with kivy hover <code>example_interactive_axis</code> Activate interactive axis feature <code>example_interactive_converter</code> 1 function converter to convert any matplotlib figure into kivy interactive figure <code>example_kivy_navigation_bar</code> Example to add kivy nagigation toolbar <code>example_legend</code> Example to add kivy recycle view legend widget (vertical legend) <code>example_legend_horizontal</code> Example to add kivy recycle view legend widget (horizontal legend) <code>example_legend_matplotlib</code> Example to show how to convert matplotlib legend into interactive legend <code>example_legend_matpotlib_with_figure_update</code> Convert your matplotlib legend into interactive legend when you update your figure <code>example_live_data</code> Example for live data (fps 1/60) <code>example_live_with_big_data</code> Example for live data for big data (fps 1/60) <code>example_minmax_option</code> Figure with min/max feature <code>example_mplcursors</code> Use mplcursors algorithm with MatplotFigure figure (note: MatplotFigureSubplot all ready use mplcursors algorithm) <code>example_rectangle_selector</code> Example with rectangle kivy selectors tools <code>example_seaborn</code> Example with seaborn library <code>example_slider</code> Example with horizontal and vertical slider (slider made in kivy) <code>example_twinx</code> Basic example with twinx figure (MatplotFigureTwinx) <code>navigation_bar_general_purpose</code> Basic example with MatplotFigureGeneral widget and MatplotNavToolbar widget"},{"location":"Examples/Selectors/kivy_selectors/","title":"Selectors tools","text":"<p>This example show how to use kivy selectors widgets.</p> <p></p> <p>example folder: 'example_all_selectors'</p> <pre><code>from kivy.utils import platform\nfrom kivy.config import Config\n\n#avoid conflict between mouse provider and touch (very important with touch device)\n#no need for android platform\nif platform != 'android':\n    Config.set('input', 'mouse', 'mouse,disable_on_activity')\nelse:\n    #for android, we remove mouse input to not get extra touch \n    Config.remove_option('input', 'mouse')\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom kivy.lang import Builder\nfrom kivy.properties import NumericProperty,StringProperty\nfrom kivy.app import App\nimport kivy_matplotlib_widget\n\n\nKV = \"\"\"\nScreen\n    figure_wgt:figure_wgt\n    figure_wgt2:figure_wgt2\n    BoxLayout:\n\n        orientation:'vertical'\n        BoxLayout:\n            size_hint_y:0.2\n            Button:\n                text:\"home\"\n                on_press:app.home()\n\n            ToggleButton:\n                group:'touch_mode'\n                state:'down'\n                text:\"pan\" \n                on_press:\n                    app.set_touch_mode('pan')\n                    self.state='down'    \n\n            ToggleButton:\n                group:'touch_mode'\n                text: 'rectangle selector'\n                on_press: \n                    app.set_selector('rectangle')\n                    app.set_touch_mode('selector')  \n                    self.state='down'                    \n\n            ToggleButton:\n                group:'touch_mode'\n                text: 'lasso selector'\n                on_press: \n                    app.set_selector('lasso')\n                    app.set_touch_mode('selector')  \n                    self.state='down'\n\n            ToggleButton:\n                group:'touch_mode'\n                text: 'ellipse selector'\n                on_press: \n                    app.set_selector('ellipse')\n                    app.set_touch_mode('selector')  \n                    self.state='down'                    \n\n            ToggleButton:\n                group:'touch_mode'\n                text: 'span selector'\n                on_press: \n                    app.set_selector('span')\n                    app.set_touch_mode('selector')  \n                    self.state='down'   \n\n            Button:\n                text:\"clear selection\"\n                on_release:app.clear_selection()                    \n\n        BoxLayout:\n            MatplotFigureSubplot:\n                id:figure_wgt\n                current_selector:'lasso'\n\n            MatplotFigure:\n                id:figure_wgt2 \n                current_selector:'lasso'\n\n        BoxLayout:\n            size_hint_y:0.1\n\n            Label:\n                text:'Number of selected points: ' + str(app.npts)\n            Label:\n                text:'Maximum value in selection: ' + app.max_value               \n\n\"\"\"\n\n\n\nclass TestApp(App):\n    npts = NumericProperty(0)\n    max_value = StringProperty(\"\")\n\n    def build(self):\n        self.screen=Builder.load_string(KV)\n        return self.screen\n\n\n    def on_start(self, *args):\n\n        # Fixing random state for reproducibility\n        np.random.seed(19680801)\n\n        data = np.random.rand(100, 2)\n\n        subplot_kw = dict(xlim=(0, 1), ylim=(0, 1), autoscale_on=False)\n        fig, ax = plt.subplots(subplot_kw=subplot_kw)\n\n        pts = ax.scatter(data[:, 0], data[:, 1], s=80)\n\n        self.screen.figure_wgt.figure = fig\n        self.screen.figure_wgt.set_collection()\n        self.screen.figure_wgt.set_callback(self.callback_selection)\n        self.screen.figure_wgt.set_callback_clear(self.callback_clear)\n\n        xdata = np.linspace(0,9*np.pi, num=301)\n        ydata = np.sin(xdata)*np.cos(xdata*2.4)\n\n        fig2, ax2 = plt.subplots()\n        line, = ax2.plot(xdata, ydata)\n        self.point, = ax2.plot([],[], marker=\"o\", color=\"crimson\")\n        self.text = ax2.text(0,0,\"\")\n        self.screen.figure_wgt2.figure = fig2\n        self.screen.figure_wgt2.set_line(line)\n        self.screen.figure_wgt2.set_callback(self.callback_selection2)\n        self.screen.figure_wgt2.set_callback_clear(self.callback_clear2)\n\n    def set_selector(self,selector):\n        self.screen.figure_wgt.current_selector = selector\n        self.screen.figure_wgt2.current_selector = selector\n\n    def set_touch_mode(self,mode):\n        self.screen.figure_wgt.touch_mode=mode \n        self.screen.figure_wgt2.touch_mode=mode \n\n    def home(self):\n        self.screen.figure_wgt.home() \n        self.screen.figure_wgt2.home()         \n\n    def callback_selection(self,selectot_wgt):\n        \"\"\"\n\n        Parameters\n        ----------\n        selectot_wgt : rectangle widget\n            USEFUL attributes:\n            verts: axis coordinate of selector rectangle box\n            ind: indice of selected pts\n            collection: matplotlib collection instance\n            fc: matplotlib collection facecolor\n            ind_line: indice of selected pts (line)\n            line: matplotlib line instance\n\n        Returns\n        -------\n        None.\n\n        \"\"\"\n\n        #get number of selected points\n        self.npts= len(selectot_wgt.ind)\n\n    def callback_selection2(self,selectot_wgt):\n        \"\"\"\n\n        Parameters\n        ----------\n        selectot_wgt : rectangle widget\n            USEFUL attributes:\n            verts: axis coordinate of selector rectangle box\n            ind: indice of selected pts (scatter)\n            collection: matplotlib collection instance\n            fc: matplotlib collection facecolor\n            ind_line: indice of selected pts (line)\n            line: matplotlib line instance\n\n        Returns\n        -------\n        None.\n\n        \"\"\"\n\n        #get maxium value in selection\n        ind_line= selectot_wgt.ind_line  \n        line_instance = selectot_wgt.line\n\n        xdata,ydata = line_instance.get_data()\n        xmasked = xdata[ind_line]\n        ymasked = ydata[ind_line]\n\n        if len(xmasked) &gt; 0:\n            xmax = xmasked[np.argmax(ymasked)]\n            ymax = ymasked.max() \n            self.max_value= f\"{ymax:.3f}\"\n            tx = \" xmax: {:.3f}\\n ymax {:.3f}\".format(xmax,ymax)\n            self.point.set_data([xmax],[ymax])\n            self.text.set_text(tx)\n            self.text.set_position((xmax,ymax))    \n\n        self.screen.figure_wgt2.figure.canvas.draw_idle()\n\n    def callback_clear(self):\n        self.screen.figure_wgt.selector.resize_wgt.clear_selection()\n        self.npts = 0\n\n    def callback_clear2(self):\n\n        self.screen.figure_wgt2.selector.resize_wgt.clear_selection()\n        self.max_value=\"\"\n        self.text.set_text(\"\")\n        self.point.set_data([],[])\n        self.screen.figure_wgt2.figure.canvas.draw_idle()      \n\n    def clear_selection(self):\n        self.screen.figure_wgt.selector.resize_wgt.clear_selection()\n        self.npts = 0\n        self.screen.figure_wgt2.selector.resize_wgt.clear_selection()\n        self.max_value=\"\"\n        self.text.set_text(\"\")\n        self.point.set_data([],[])\n        self.screen.figure_wgt2.figure.canvas.draw_idle()\n\nif __name__ == '__main__':\n    TestApp().run()\n</code></pre>"},{"location":"FAQ/faq-list/","title":"Others","text":""},{"location":"FAQ/faq-list/#why-not-using-plotly","title":"Why not using plotly","text":"<p>plotly is a very great and powerful tool when you are doing analysis in your desktop but it's a very big package when you are doing an app (pyinstaller or p4a). Also it need a web viewer in kivy to make it work. </p>"},{"location":"FAQ/matplotlib-events/","title":"Matplotlib events","text":""},{"location":"FAQ/matplotlib-events/#can-i-used-matplotlib-event","title":"Can I used matplotlib event","text":"<p>Yes but matplotlib tools can be difficult to incorporate inside my library because it interfare with kivy touch behavior. Sometime, you need to declare and handle 3 matplotlib event (down/move/up) and it can't be very complicated (e.g matplotlib selector tool). Most matplotlib event can be easily integrated (e.g pick_event or on_enter event - example) but if you need to handle more matplotlib artists and use blit method, it can be harder. At the end, I think it better to use kivy widgets for this.</p>"},{"location":"FAQ/seaborn/","title":"Seaborn","text":""},{"location":"FAQ/seaborn/#can-i-used-seaborn","title":"Can I used Seaborn","text":"<p>yes but seaborn do his own think with the matplotlib artists. So it can be hard to set automatically the legend or the cursor/hover.</p>"},{"location":"Tips/agg-opt/","title":"Optimized Agg backend","text":"<p>Agg backend can be optimize with several matplotlib option. This can be useful for big data.</p> <p>These are the option in the graph_generator_template.py. It can be set in the top of your code before you create your matplotlib figure.</p> <pre><code>#optimized draw on Agg backend\nimport matplotlib as mpl\nmpl.rcParams['path.simplify'] = True\nmpl.rcParams['path.simplify_threshold'] = 1.0\nmpl.rcParams['agg.path.chunksize'] = 1000 #you can change this parameter for better result. See matplotlib docs\n</code></pre> <p>source: matplotlib.org/stable/users/explain/artists/performance.html</p>"},{"location":"Tips/pyinstaller-tips/","title":"Pyinstaller tips","text":"<p>If you want to reduce your pyinstaller app size, you can used numpy without openblas. Good article to compile numpy without openblas on windows. Can be useful if you want to reduce your package size with pyinstaller. myuan.fun/Compile-numpy-without-openblas-to-reduce-pack-size</p>"},{"location":"Widgets/graph-subplot-widget/","title":"MatplotFigureSubplot","text":"<p>MatplotFigureSubplot should handle all kind of matplotlib figure.  Because it handle multiple axes, you need to click on the axis to used pan and zoom functions. It also draw all visibles artists.</p> <p>This widget is based on MatplotFigure (class inheritance).</p> <p></p>"},{"location":"Widgets/graph-subplot-widget/#some-useful-kivy-properties","title":"Some useful kivy properties","text":"<ul> <li>fast_draw (bool) : axis values are not updated for faster draw (default True)</li> <li>draw_all_axes (bool) : draw all axes in current figure. Useful with twin axis or all kind of overlapping axis (default False)</li> <li>interactive_axis (bool) : interactive axis like plotly library (default False)</li> <li>max_hover_rate (None or float) : set a max hover rate. Useful for big data (default None)</li> <li>min_max_option (bool) : min/max touch option to easily change axis limit (default False)</li> <li>auto_cursor (bool) : automatically set cursor on the figure (default False)  </li> </ul> <p>How to use in Kv language : <pre><code>MatplotFigureSubplot:\n    fast_draw:False\n    draw_all_axes: True\n    interactive_axis: True\n    max_hover_rate: 5 /60\n    min_max_option:True\n    auto_cursor: True\n</code></pre></p>"},{"location":"Widgets/graph-subplot-widget/#examples-using-this-widget","title":"Examples using this widget","text":"<ul> <li>example_4_differents_subplot</li> </ul>"},{"location":"Widgets/graph-widget-3D/","title":"MatplotFigure3D","text":"<p>MatplotFigure3D is to handle 3D matplotlib figure. For data zooming, you can use mouse scroll on desktop or use 2 fingers zooming for touch device.</p> <p></p>"},{"location":"Widgets/graph-widget-3D/#matplotfigure3dlayout","title":"MatplotFigure3DLayout","text":"<p>MatplotFigure3DLayout is Boxlayout that handle cursor, figure pan and figure zoom interaction. See main_advanced.py in example_3D folder. For figure zooming, you can use mouse scroll on desktop or use 2 fingers zooming for touch device.</p> <p></p>"},{"location":"Widgets/graph-widget-3D/#examples-using-this-widget","title":"Examples using this widget","text":"<ul> <li>example_3D</li> </ul>"},{"location":"Widgets/graph-widget/","title":"MatplotFigure","text":"<p>MatplotFigure is a simplified widget to handle figure with 1 axis and lines only. </p> <p>Note</p> <p>Only lines artists will be draw when fast_draw is True. For all other kind of figure with other artists, please use MatplotFigureSubplot widget.</p> <p></p>"},{"location":"Widgets/graph-widget/#some-useful-kivy-properties","title":"Some useful kivy properties","text":"<ul> <li>fast_draw (bool) : axis values are not updated for faster draw (default True)</li> <li>interactive_axis (bool) : interactive axis like plotly library (default False)</li> <li>min_max_option (bool) : min/max touch option to easily change axis limit (default False)</li> <li>auto_cursor (bool) : automatically set cursor on the figure (default False) </li> </ul> <p>How to use in Kv language : <pre><code>MatplotFigure:\n    fast_draw:False\n    interactive_axis: True\n    min_max_option:True\n    auto_cursor: True\n</code></pre></p>"},{"location":"Widgets/graph-widget/#examples-using-this-widget","title":"Examples using this widget","text":"<ul> <li>example_basic</li> <li>example_big_data</li> <li>example_hover</li> </ul>"},{"location":"Widgets/legend-widget/","title":"LegendRv","text":"<p>LegendRv used kivy recycle view widget to create interactive legend. At the moment this widget can only be used with 1 axis with lines. To be functional, this widget need a figure_wgt object and need to set all figure lines with set_data function. See example_legend for more detail.</p> <p>For horizonal kivy legend, use LegendRvHorizontal.</p> <p>Note</p> <p>Matplotlib legend can also be converted into interactive legend. See MatplotlibInteractiveLegend function to archive this purpose. Also look example_legend_matplotlib in the examples folder.</p> <p></p>"},{"location":"Widgets/legend-widget/#touch-behavior","title":"touch behavior","text":"<ul> <li>single tap : hide or show selected line</li> <li>double tap : show all lines if selected line is the only visible line, otherwise it isolate the selected line</li> </ul>"},{"location":"Widgets/legend-widget/#some-useful-kivy-properties","title":"Some useful kivy properties","text":"<ul> <li>text_color (color property) : text color (default black)</li> <li>text_font (str) : text font (default Roboto)</li> <li>text_font_size (numeric property) : font size (default dp(18.5))</li> <li>box_height (numeric property) : box height of all legend element (default dp(48)) </li> </ul> <p>How to use in Kv language : <pre><code>MatplotFigure:\n    id:figure_wgt\nLegendRv:\n    figure_wgt:figure_wgt\n    size_hint_x:0.3  \n    text_color: 1,0,1,1\n    text_font:'DejaVuSans'\n    text_font_size:dp(24)\n    box_height:dp(60)  \n</code></pre></p>"},{"location":"Widgets/legend-widget/#examples-using-this-widget","title":"Examples using this widget","text":"<ul> <li>example_legend</li> <li>example_legend_horizontal</li> </ul>"},{"location":"Widgets/navigation-bar-widget/","title":"KivyMatplotNavToolbar","text":"<p>KivyMatplotNavToolbar is a kivy navigation bar. All the option avalaible used the icons on NavigationIcons.ttf font.</p> <p>Note</p> <p>This widget need a figure object to be functional. figure_wgt property need a matplotlib figure object.</p> <p></p>"},{"location":"Widgets/navigation-bar-widget/#some-useful-kivy-properties","title":"Some useful kivy properties","text":"<ul> <li>nav_icon (str) : navigation icon used (option: 'normal','minimal','all', '3D', 'custom'. Default: 'normal')</li> <li>hover_mode (str) : type of hover mode (option: 'desktop','touch'. Default: 'touch')</li> <li>show_cursor_data (bool) : show cursor coordinate (default False). Useful when 'desktop mode' is set.</li> <li>orientation_type (str) : navigation bar orientation (option: 'actionbar','rail'. Default: 'actionbar')</li> </ul> <p>How to use in Kv language : <pre><code>KivyMatplotNavToolbar:\n    nav_icon:'all'\n    hover_mode:'desktop'\n    show_cursor_data:True\n    figure_wgt:figure_wgt\n\nMatplotFigureSubplot:\n    id:figure_wgt\n</code></pre></p>"},{"location":"Widgets/navigation-bar-widget/#3d-graph-usage","title":"3D graph usage","text":"<p>For 3D graph use nav_icon = '3D' properties.</p> <p>Note</p> <p>For 3D graph, you need to set figure_wgt_layout property to be functional. hover_mode and show_cursor_data doesn't work for 3D graph</p> <p>How to use in Kv language : <pre><code>KivyMatplotNavToolbar:\n    nav_icon:'3D'\n    figure_wgt_layout:figure_wgt_layout\n\nMatplotFigure3DLayout:\n    id:figure_wgt_layout\n</code></pre></p> <p></p>"},{"location":"Widgets/navigation-bar-widget/#examples-using-this-widget","title":"Examples using this widget","text":"<ul> <li>example_kivy_navigation_bar</li> </ul>"},{"location":"Widgets/others-widget/","title":"Others","text":"<p>Some others widgets are availables in the library. Here's a list with some decription</p> Widget Description <code>MatplotFigureScatter</code> Widget for scatter and lines figure. User set extra hover infromation with 'scatter_label' attribute. See example 'example_cursor_scatter' for more information. <code>MatplotFigureTwinx</code> Widget for twinx axis and lines Only. The user no need to click on the axis to activate pan. See example 'example_twinx' for more information. <code>MatplotFigureCropFactor</code> Widget with 'crop_factor' kivy property (defalut 2.2). This property can reduce the figure dpi for faster draw. <code>MatplotFigureGeneral</code> Widget if all others widgets are not working for your case. Used matplotlib event for all interactive behavior like pan and zoom. Fast_draw attibute is not available for this widget. See example 'navigation_bar_general_purpose' for more information. <code>MatplotNavToolbar</code> Simple navigation toolbar. Use only with MatplotFigureGeneral widget"}]}